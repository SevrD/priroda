// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
)

const addAnnouncement = `-- name: AddAnnouncement :one
INSERT INTO announcements (
  tgID, txt, chatID
  ) VALUES (
    ?1, ?2, ?3
  )
RETURNING id
`

type AddAnnouncementParams struct {
	Tgid   sql.NullInt64  `json:"tgid"`
	Txt    sql.NullString `json:"txt"`
	Chatid sql.NullInt64  `json:"chatid"`
}

func (q *Queries) AddAnnouncement(ctx context.Context, arg AddAnnouncementParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addAnnouncement, arg.Tgid, arg.Txt, arg.Chatid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addPhoto = `-- name: AddPhoto :exec
UPDATE announcements
SET fileID = ?
WHERE id = ?
`

type AddPhotoParams struct {
	Fileid sql.NullString `json:"fileid"`
	ID     int64          `json:"id"`
}

func (q *Queries) AddPhoto(ctx context.Context, arg AddPhotoParams) error {
	_, err := q.db.ExecContext(ctx, addPhoto, arg.Fileid, arg.ID)
	return err
}

const ban = `-- name: Ban :exec
UPDATE users
SET ban = true
WHERE tgID = ?
`

func (q *Queries) Ban(ctx context.Context, tgid sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, ban, tgid)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  tgID, login, name, createData, chatID
) VALUES (
  ?1, ?2, ?3, ?4, ?5
) ON CONFLICT (tgID)
DO UPDATE SET login = ?2, name = ?3, chatID = ?5
`

type CreateUserParams struct {
	Tgid       sql.NullInt64 `json:"tgid"`
	Login      string        `json:"login"`
	Name       string        `json:"name"`
	Createdata sql.NullTime  `json:"createdata"`
	Chatid     sql.NullInt64 `json:"chatid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Tgid,
		arg.Login,
		arg.Name,
		arg.Createdata,
		arg.Chatid,
	)
	return err
}

const getAnnId = `-- name: GetAnnId :one
SELECT annID 
FROM chatStatuses
WHERE tgID = ?
`

func (q *Queries) GetAnnId(ctx context.Context, tgid sql.NullInt64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getAnnId, tgid)
	var annid sql.NullInt64
	err := row.Scan(&annid)
	return annid, err
}

const getAnnouncement = `-- name: GetAnnouncement :one
SELECT txt, publicID
FROM announcements
WHERE tgID = ? AND id = ?
`

type GetAnnouncementParams struct {
	Tgid sql.NullInt64 `json:"tgid"`
	ID   int64         `json:"id"`
}

type GetAnnouncementRow struct {
	Txt      sql.NullString `json:"txt"`
	Publicid sql.NullInt64  `json:"publicid"`
}

func (q *Queries) GetAnnouncement(ctx context.Context, arg GetAnnouncementParams) (GetAnnouncementRow, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncement, arg.Tgid, arg.ID)
	var i GetAnnouncementRow
	err := row.Scan(&i.Txt, &i.Publicid)
	return i, err
}

const getAnnouncementOnAdmMsgID = `-- name: GetAnnouncementOnAdmMsgID :one
SELECT txt, fileID, chatID, id, tgID, publicID
FROM announcements
WHERE admMsgID = ?
`

type GetAnnouncementOnAdmMsgIDRow struct {
	Txt      sql.NullString `json:"txt"`
	Fileid   sql.NullString `json:"fileid"`
	Chatid   sql.NullInt64  `json:"chatid"`
	ID       int64          `json:"id"`
	Tgid     sql.NullInt64  `json:"tgid"`
	Publicid sql.NullInt64  `json:"publicid"`
}

func (q *Queries) GetAnnouncementOnAdmMsgID(ctx context.Context, admmsgid sql.NullInt64) (GetAnnouncementOnAdmMsgIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncementOnAdmMsgID, admmsgid)
	var i GetAnnouncementOnAdmMsgIDRow
	err := row.Scan(
		&i.Txt,
		&i.Fileid,
		&i.Chatid,
		&i.ID,
		&i.Tgid,
		&i.Publicid,
	)
	return i, err
}

const getStatus = `-- name: GetStatus :one
SELECT status 
FROM chatStatuses
WHERE tgID = ?
`

func (q *Queries) GetStatus(ctx context.Context, tgid sql.NullInt64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getStatus, tgid)
	var status sql.NullInt64
	err := row.Scan(&status)
	return status, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT login, name, ban 
FROM users
WHERE tgID = ?
`

type GetUserInfoRow struct {
	Login string       `json:"login"`
	Name  string       `json:"name"`
	Ban   sql.NullBool `json:"ban"`
}

func (q *Queries) GetUserInfo(ctx context.Context, tgid sql.NullInt64) (GetUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, tgid)
	var i GetUserInfoRow
	err := row.Scan(&i.Login, &i.Name, &i.Ban)
	return i, err
}

const setAdminMsgID = `-- name: SetAdminMsgID :exec
UPDATE announcements
SET admMsgId = ?
WHERE id = ?
`

type SetAdminMsgIDParams struct {
	Admmsgid sql.NullInt64 `json:"admmsgid"`
	ID       int64         `json:"id"`
}

func (q *Queries) SetAdminMsgID(ctx context.Context, arg SetAdminMsgIDParams) error {
	_, err := q.db.ExecContext(ctx, setAdminMsgID, arg.Admmsgid, arg.ID)
	return err
}

const setPublicID = `-- name: SetPublicID :exec
UPDATE announcements
SET publicID = ?
WHERE id = ?
`

type SetPublicIDParams struct {
	Publicid sql.NullInt64 `json:"publicid"`
	ID       int64         `json:"id"`
}

func (q *Queries) SetPublicID(ctx context.Context, arg SetPublicIDParams) error {
	_, err := q.db.ExecContext(ctx, setPublicID, arg.Publicid, arg.ID)
	return err
}

const setStatus = `-- name: SetStatus :exec
INSERT INTO chatStatuses (
  tgID, status, annID
) VALUES (
  ?1, ?2, ?3
) ON CONFLICT (tgID)
DO UPDATE SET status = ?2, annID = ?3
`

type SetStatusParams struct {
	Tgid   sql.NullInt64 `json:"tgid"`
	Status sql.NullInt64 `json:"status"`
	Annid  sql.NullInt64 `json:"annid"`
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.db.ExecContext(ctx, setStatus, arg.Tgid, arg.Status, arg.Annid)
	return err
}

const unBan = `-- name: UnBan :exec
UPDATE users
SET ban = false
WHERE tgID = ?
`

func (q *Queries) UnBan(ctx context.Context, tgid sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, unBan, tgid)
	return err
}
